BROKER SCHEMA com.sbm.eidiko
PATH DBloggingSharedLib;
--DECLARE routingDetails SHARED ROW;
--DECLARE logger_name,log_type,log4j_config_path,log4j_error_msg EXTERNAL CHARACTER '';
--DECLARE rc BOOLEAN false;
CREATE COMPUTE MODULE HTTPGatewayReq_FramingAPICallReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL RequestToAPI();
		RETURN TRUE;
	END;


	CREATE PROCEDURE RequestToAPI() BEGIN
		DECLARE encodeRef ,ccidRef INTEGER;
		DECLARE application_name CHARACTER ApplicationLabel;
		DECLARE created_On TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE inref REFERENCE TO InputRoot.JSON.Data;
		DECLARE routingDetails ROW;
		DECLARE flowName CHARACTER MessageFlowLabel;
		DECLARE headerRef REFERENCE TO InputRoot.HTTPInputHeader;
		SET Environment.encodeRef = InputRoot.Properties.Encoding;
		SET Environment.ccidRef = InputRoot.Properties.CodedCharSetId;
		IF (LENGTH(headerRef.Messageid)>0) AND (LENGTH(headerRef.Channelname)>0) AND (LENGTH(headerRef.Servicecode)>0) THEN 
		--IF EXISTS(InputRoot.HTTPInputHeader[]) THEN
		SET Environment.servicecode = headerRef.Servicecode;
		SET Environment.channelname = headerRef.Channelname;
		SET Environment.id = InputRoot.HTTPInputHeader.Messageid;
		ELSE
			THROW USER EXCEPTION VALUES('Mandatory Header Fields are missing in the HTTP Header');
		END IF;
		IF LENGTH(headerRef.Messageid)<>16 THEN
			THROW USER EXCEPTION VALUES('Message Id length is not equal to 16. Please pass the valid length');

		END IF;
		
		SET encodeRef = InputRoot.Properties.Encoding;
		SET ccidRef = InputRoot.Properties.CodedCharSetId;
		
		SET Environment.flowName = flowName;
		SET Environment.logType = 'ChannelReq';
		--insert into Database.SERVICE_MAPPER values(10001, 'http://localhost:7800/advancepaymentbackoffice_app/v1/locked-amounts','Y','Netplus', 'Y');
		SET routingDetails.Values[] = SELECT A.* FROM Database.SERVICE_MAPPER AS A WHERE A.SERVICECODE = (Environment.servicecode);
		/*SET Environment.Variables.Values[] = routingDetails.Values[];
		SET queryStatement = 'SELECT * FROM SERVICE_MAPPER WHERE SERVICECODE = ?';
		SET Environment.Values[] = PASSTHRU(queryStatement TO Database.SQLSERVER VALUES (Environment.servicecode)); --VALUES (Environment.servicecode));
		*/


		SET Environment.payload = CAST(ASBITSTREAM (inref)AS CHARACTER CCSID ccidRef ENCODING encodeRef);
		--CALL AUDIT_PROCEDURE(Environment.messageId, created_On, Environment.chlreq, 'Channel_Request', application_name);
		--log EVENT values(Environment.messageId, created_On, Environment.chlreq, 'Channel_Request', application_name);
		IF routingDetails.Values.DBLOGGINGFLAG = 'Y' THEN
			CALL insertAuditLog(Environment.id,created_On,Environment.payload, Environment.logType,application_name);
			--CALL DB_LOGGING_PROC(Environment.id, created_On, Environment.chlreq, application_name, 'CHANNEL_REQ', logger_name, Environment.servicecode, OutputRoot, Environment);
			/*SET OutputRoot.XMLNSC.DBLogging.id = Environment.id;
			SET OutputRoot.XMLNSC.DBLogging.created_On = created_On;
			SET OutputRoot.XMLNSC.DBLogging.payload = Environment.chlreq;
			SET OutputRoot.XMLNSC.DBLogging.application_name = application_name;
			SET OutputRoot.XMLNSC.DBLogging.reqType = 'CHANNEL_REQ';
			PROPAGATE TO TERMINAL 'out1';*/

		END IF;


		IF routingDetails.Values.CONSOLELOGFLAG = 'Y' THEN
			LOG EVENT VALUES('CHANNEL_REQ: ', Environment.chlReq, application_name, MessageFlowLabel, Environment.id, created_On);
		END IF;
		--IF LENGTH(CAST(routingDetails.Values.SERVICECODE AS CHARACTER)) = 0 THEN
		IF EXISTS(routingDetails.[]) = FALSE THEN
			/*CREATE FIELD OutputRoot.JSON.Data;
			DECLARE errOutRef REFERENCE TO OutputRoot.JSON.Data;
			SET errOutRef.statusCode = '999';
			SET errOutRef.message = 'Internal Server Error';
			SET errOutRef.error.messagId = Environment.id;
			SET errOutRef.error.error_desc = 'No Service Code found';
			PROPAGATE TO TERMINAL 'out2';*/
			--SET errOutRef.additionalData =
			THROW USER EXCEPTION VALUES('No Service Code found');

		END IF;		
		/* DECLARE serviceCode CHARACTER;
		SET serviceCode = headerRef.Servicecode;
		DECLARE detailsCount INTEGER;
		DECLARE index INTEGER 1;
		SET detailsCount = CARDINALITY(routingDetails.Values[]);
		WHILE detailsCount >= index DO
		IF serviceCode = routingDetails.Values[index].SERVICECODE THEN
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = routingDetails.Values[index].URL;
		ELSE
		THROW USER EXCEPTION VALUES('No Service Code found');
		END IF;
		SET index = index + 1;
		END WHILE;*/
		DECLARE queryStringExists BOOLEAN EXISTS(InputLocalEnvironment.HTTP.Input.QueryString.[]);
		DECLARE pathParamExists BOOLEAN EXISTS(InputLocalEnvironment.HTTP.Input.Path.[]);
		IF queryStringExists = TRUE THEN
			DECLARE methodName CHARACTER (InputRoot.HTTPInputHeader."X-Original-HTTP-Command");
			DECLARE methodName1 CHARACTER (SUBSTRING(methodName BEFORE ' '));
			IF methodName1 = 'GET' THEN
				SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'GET';
				SET OutputLocalEnvironment.Destination.HTTP.RequestURL = routingDetails.Values.URL;
				SET OutputLocalEnvironment.Destination.HTTP.QueryString = InputLocalEnvironment.HTTP.Input.QueryString;
			ELSEIF methodName1 = 'PUT' THEN
				SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'PUT';
				DECLARE pathRef REFERENCE TO InputLocalEnvironment.HTTP.Input.QueryString.[>];
				DECLARE pathCount INTEGER CARDINALITY(InputLocalEnvironment.HTTP.Input.QueryString.[]);
				DECLARE pathInit INTEGER 1;
				WHILE pathInit <= pathCount DO
					DECLARE pathName CHARACTER FIELDVALUE(InputLocalEnvironment.HTTP.Input.QueryString.[pathInit]);
					--IF LENGTH(pathName) > 0 THEN
					IF pathInit = 1 THEN
						SET OutputLocalEnvironment.Destination.HTTP.RequestURL = routingDetails.Values.URL|| '/'||pathName;
					ELSEIF pathInit > 1 THEN
						SET OutputLocalEnvironment.Destination.HTTP.RequestURL = OutputLocalEnvironment.Destination.HTTP.RequestURL || '/'||pathName;
					END IF;

					SET pathInit = pathInit + 1;
				END WHILE;

			END IF;
			--SET OutputLocalEnvironment.Destination.HTTP.RequestURL = routingDetails.Values.URL;
			--SET OutputLocalEnvironment.Destination.HTTP.RequestURL = routingDetails.Values.URL||'?'||InputLocalEnvironment.HTTP.Input.QueryString.*;
			/*ELSEIF pathParamExists = TRUE THEN
			DECLARE segmentRef REFERENCE TO InputLocalEnvironment.HTTP.Input.Path.[>];
			WHILE LASTMOVE(segmentRef) DO
			--SET purCode = purCode || ','||purRef.credit_account.purpose_code;
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = routingDetails.Values.URL|| '/'||FIELDVALUE(segmentRef.*);
			MOVE segmentRef NEXTSIBLING;
			END WHILE;
			SET OutputRoot = InputRoot;*/
			--SET OutputLocalEnvironment.Destination.HTTP.
		ELSE
			SET OutputRoot = InputRoot;
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = routingDetails.Values.URL;
		END IF;

		SET OutputRoot.HTTPInputHeader = InputRoot.HTTPInputHeader;
		--SET OutputRoot.HTTPInputHeader.messageId = Environment.id;
		SET OutputRoot.HTTPInputHeader.DBLOGGINGFLAG = routingDetails.Values.DBLOGGINGFLAG;
		SET OutputRoot.HTTPInputHeader.CONSOLELOGFLAG = routingDetails.Values.CONSOLELOGFLAG;

	END;
END MODULE;